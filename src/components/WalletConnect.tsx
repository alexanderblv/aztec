'use client'

import { useState } from 'react'
import { useAztec } from '@/lib/aztec-context'
// import { aztecDemoService } from '@/lib/aztec-demo'
// import { AztecService } from '@/lib/aztec'

interface WalletConnectProps {
  onWalletConnected: (address: string) => void
  network: 'sandbox' | 'testnet'
}

export default function WalletConnect({ onWalletConnected, network }: WalletConnectProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string>('')
  const [showPrivateKeyInput, setShowPrivateKeyInput] = useState(false)
  const [privateKey, setPrivateKey] = useState('')

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Aztec
  const { service, connectWallet } = useAztec()

  const handleCreateWallet = async () => {
    setIsLoading(true)
    setError('')
    
    try {
      const address = await connectWallet()
      onWalletConnected(address)
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', err)
      setError(err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞')
    } finally {
      setIsLoading(false)
    }
  }

  const handleConnectExisting = async () => {
    if (!privateKey.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á')
      return
    }

    setIsLoading(true)
    setError('')
    
    try {
      const address = await connectWallet(privateKey)
      onWalletConnected(address)
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', err)
      setError(err.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="card max-w-md mx-auto">
      <h2 className="text-2xl font-bold text-center mb-6">
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Aztec {network === 'testnet' ? 'Testnet' : 'Sandbox'}
      </h2>
      
      {error && (
        <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
          {error}
        </div>
      )}

      <div className="space-y-4">
        <button
          onClick={handleCreateWallet}
          disabled={isLoading}
          className="w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? '–°–æ–∑–¥–∞–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫'}
        </button>

        <div className="text-center">
          <span className="text-gray-500">–∏–ª–∏</span>
        </div>

        {!showPrivateKeyInput ? (
          <button
            onClick={() => setShowPrivateKeyInput(true)}
            className="w-full btn-secondary"
          >
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫
          </button>
        ) : (
          <div className="space-y-3">
            <input
              type="password"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"
              value={privateKey}
              onChange={(e) => setPrivateKey(e.target.value)}
              className="input-field"
            />
            <div className="flex space-x-2">
              <button
                onClick={handleConnectExisting}
                disabled={isLoading || !privateKey.trim()}
                className="flex-1 btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? '–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
              </button>
              <button
                onClick={() => {
                  setShowPrivateKeyInput(false)
                  setPrivateKey('')
                  setError('')
                }}
                className="flex-1 btn-secondary"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        )}
      </div>

      <div className="mt-6 text-sm text-gray-600 text-center">
        {network === 'testnet' ? (
          <p>
            üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ Aztec Alpha Testnet
          </p>
        ) : (
          <p>
            ‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Aztec Sandbox.
          </p>
        )}
      </div>
    </div>
  )
} 