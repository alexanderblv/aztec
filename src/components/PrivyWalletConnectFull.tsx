'use client'

import React, { useEffect, useState } from 'react'

interface PrivyWalletConnectFullProps {
  onWalletConnected: (address: string) => void
  onError?: (error: string) => void
  onLogoutComplete?: () => void
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Privy —Ö—É–∫–æ–≤
function PrivyWalletContent({ onWalletConnected, onError, onLogoutComplete }: PrivyWalletConnectFullProps) {
  const { usePrivy, useWallets } = require('@privy-io/react-auth')
  
  const { 
    ready, 
    authenticated, 
    user, 
    login, 
    logout 
  } = usePrivy()
  
  const { wallets } = useWallets()
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ logout
  const [hasLoggedOut, setHasLoggedOut] = useState(false)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ logout –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const privyLoggedOut = localStorage.getItem('privyLoggedOut')
    if (privyLoggedOut === 'true') {
      setHasLoggedOut(true)
    }
  }, [])

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã—Ö–æ–¥–∏–ª —è–≤–Ω–æ
    if (authenticated && user && wallets.length > 0 && !hasLoggedOut) {
      const wallet = wallets[0]
      onWalletConnected(wallet.address)
    } else if (authenticated && hasLoggedOut) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏–ª, –Ω–æ Privy —Å–Ω–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª (–∏–∑-–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º
      logout().catch(console.error)
    }
  }, [authenticated, user, wallets, onWalletConnected, hasLoggedOut, logout])

  const handleLogout = async () => {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ logout —Å—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è UI
      setHasLoggedOut(true)
      localStorage.setItem('privyLoggedOut', 'true')
      
      // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      onLogoutComplete?.()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º logout –≤ Privy
      await logout()
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å
      onLogoutComplete?.()
    }
  }

  const handleLogin = async () => {
    try {
      // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ logout –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
      setHasLoggedOut(false)
      localStorage.removeItem('privyLoggedOut')
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
      await login()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error)
    }
  }

  if (!ready) {
    return (
      <div className="card max-w-md mx-auto">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  if (authenticated && !hasLoggedOut) {
    return (
      <div className="card max-w-md mx-auto">
        <div className="text-center">
          <div className="text-green-600 text-4xl mb-4">‚úÖ</div>
          <h2 className="text-xl font-semibold mb-2">–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω</h2>
          <p className="text-gray-600 mb-4">
            {user?.email?.address || user?.phone?.number || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
          </p>
          {wallets.length > 0 && (
            <p className="text-sm text-gray-500 mb-4 font-mono">
              {wallets[0].address.slice(0, 6)}...{wallets[0].address.slice(-4)}
            </p>
          )}
          <button
            onClick={handleLogout}
            className="btn-secondary"
          >
            –û—Ç–∫–ª—é—á–∏—Ç—å
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="card max-w-md mx-auto">
      <h2 className="text-2xl font-bold text-center mb-6">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Privy</h2>
      
      <p className="text-gray-600 text-center mb-6">
        –í–æ–π–¥–∏—Ç–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º. Privy –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.
      </p>

      <button
        onClick={handleLogin}
        className="w-full btn-primary flex items-center justify-center space-x-2"
      >
        <span>üîê</span>
        <span>–í–æ–π—Ç–∏</span>
      </button>

      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold text-blue-900 mb-2">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –≤—Ö–æ–¥–∞:</h3>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>‚Ä¢ üìß Email</li>
          <li>‚Ä¢ üì± SMS</li>
          <li>‚Ä¢ üåê Google</li>
          <li>‚Ä¢ üëõ –í–Ω–µ—à–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∏ (MetaMask, WalletConnect)</li>
          <li>‚Ä¢ üîí –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ Privy</li>
        </ul>
      </div>

      <div className="mt-4 text-xs text-gray-500 text-center">
        <p>
          üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π TEE –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞—Ä–¥–∏–Ω–≥–æ–º –∫–ª—é—á–µ–π
        </p>
      </div>
    </div>
  )
}

export default function PrivyWalletConnectFull({ onWalletConnected, onError, onLogoutComplete }: PrivyWalletConnectFullProps) {
  const [hasPrivyDeps, setHasPrivyDeps] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Privy
    try {
      require('@privy-io/react-auth')
      setHasPrivyDeps(true)
    } catch (e) {
      setHasPrivyDeps(false)
      onError?.('Privy –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ —Ä–µ–∂–∏–º.')
    } finally {
      setIsLoading(false)
    }
  }, [onError])

  if (isLoading) {
    return (
      <div className="card max-w-md mx-auto">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2 text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</p>
        </div>
      </div>
    )
  }

  if (!hasPrivyDeps) {
    return (
      <div className="card max-w-md mx-auto">
        <div className="text-center">
          <div className="text-yellow-600 text-4xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-bold text-yellow-800 mb-4">
            Privy –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
          </h2>
          <p className="text-yellow-700 text-sm mb-4">
            –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω App ID
          </p>
          <button 
            onClick={() => onError?.('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º')}
            className="btn-secondary"
          >
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º
          </button>
        </div>
      </div>
    )
  }

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
  try {
    const React = require('react')
    const { PrivyProvider } = require('@privy-io/react-auth')
    // Temporarily comment out WagmiProvider from @privy-io/wagmi to avoid export issues
    // const { WagmiProvider } = require('@privy-io/wagmi')
    const { QueryClient, QueryClientProvider } = require('@tanstack/react-query')
    const { mainnet, polygon, sepolia } = require('viem/chains')
    const { http, createConfig } = require('wagmi')
    const { WagmiProvider } = require('wagmi')

    const config = createConfig({
      chains: [mainnet, polygon, sepolia],
      transports: {
        [mainnet.id]: http(),
        [polygon.id]: http(),
        [sepolia.id]: http(),
      },
    })

    const queryClient = new QueryClient()
    const appId = process.env.NEXT_PUBLIC_PRIVY_APP_ID || 'cmbg3xtxt00ffju0mvd9uds6b'

    return React.createElement(PrivyProvider, {
      appId: appId,
      config: {
        loginMethods: ['email', 'wallet', 'sms', 'google'],
        appearance: {
          theme: 'light',
          accentColor: '#3B82F6',
          landingHeader: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Private Auction',
          loginMessage: '–í–æ–π–¥–∏—Ç–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–∞—Ö',
        },
        supportedChains: [mainnet, polygon, sepolia],
        embeddedWallets: {
          createOnLogin: 'users-without-wallets',
          requireUserPasswordOnCreate: false,
        },
      }
    }, 
    React.createElement(QueryClientProvider, { client: queryClient },
      React.createElement(WagmiProvider, { config: config }, 
        React.createElement(PrivyWalletContent, { 
          onWalletConnected, 
          onError,
          onLogoutComplete 
        })
      )
    ))
  } catch (e) {
    // Fix TypeScript error by properly handling unknown type
    const errorMessage = e instanceof Error ? e.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    onError?.('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Privy: ' + errorMessage)
    return (
      <div className="card max-w-md mx-auto">
        <div className="text-center">
          <div className="text-red-600 text-4xl mb-4">‚ùå</div>
          <h2 className="text-xl font-bold text-red-800 mb-4">
            –û—à–∏–±–∫–∞ Privy
          </h2>
          <p className="text-red-700 text-sm">
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          </p>
        </div>
      </div>
    )
  }
} 