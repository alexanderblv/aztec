'use client'

import { useState, useEffect } from 'react'

interface Auction {
  id: number
  itemName: string
  description: string
  startTime: number
  endTime: number
  minBid: number
  creator: string
  isActive: boolean
  winner?: string
  winningBid?: number
}

interface AuctionListProps {
  onBidClick: (auctionId: number) => void
  filterType: 'active' | 'completed'
}

export default function AuctionList({ onBidClick, filterType }: AuctionListProps) {
  const [auctions, setAuctions] = useState<Auction[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    const loadAuctions = async () => {
      setLoading(true)
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const mockAuctions: Auction[] = [
        {
          id: 1,
          itemName: '–†–µ–¥–∫–∞—è –≤–∏–Ω—Ç–∞–∂–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞',
          description: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ 1950-—Ö –≥–æ–¥–æ–≤ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
          startTime: Date.now() - 3600000, // —á–∞—Å –Ω–∞–∑–∞–¥
          endTime: Date.now() + 3600000, // —á–µ—Ä–µ–∑ —á–∞—Å
          minBid: 1000,
          creator: '0x1234...5678',
          isActive: true,
        },
        {
          id: 2,
          itemName: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —á–∞—Å—ã Rolex',
          description: '–í–∏–Ω—Ç–∞–∂–Ω—ã–µ —á–∞—Å—ã Rolex Submariner 1970-–≥–æ –≥–æ–¥–∞',
          startTime: Date.now() - 7200000, // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
          endTime: Date.now() + 1800000, // —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
          minBid: 5000,
          creator: '0xabcd...efgh',
          isActive: true,
        },
        {
          id: 3,
          itemName: '–ü–µ—Ä–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏',
          description: '–ü–µ—Ä–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ "–í–æ–π–Ω–∞ –∏ –º–∏—Ä" –õ.–ù. –¢–æ–ª—Å—Ç–æ–≥–æ',
          startTime: Date.now() - 10800000, // 3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
          endTime: Date.now() - 1800000, // –∑–∞–∫–æ–Ω—á–∏–ª—Å—è 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          minBid: 2000,
          creator: '0x9999...1111',
          isActive: false,
          winner: '0x5555...3333',
          winningBid: 3500,
        },
        {
          id: 4,
          itemName: '–ê–Ω—Ç–∏–∫–≤–∞—Ä–Ω–∞—è –≤–∞–∑–∞',
          description: '–ö–∏—Ç–∞–π—Å–∫–∞—è –≤–∞–∑–∞ –¥–∏–Ω–∞—Å—Ç–∏–∏ –¶–∏–Ω, XVIII –≤–µ–∫',
          startTime: Date.now() - 14400000, // 4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
          endTime: Date.now() - 3600000, // –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —á–∞—Å –Ω–∞–∑–∞–¥
          minBid: 1500,
          creator: '0x7777...8888',
          isActive: false,
          winner: '0x2222...4444',
          winningBid: 2800,
        },
        {
          id: 5,
          itemName: '–í–∏–Ω—Ç–∞–∂–Ω—ã–π –º–æ—Ç–æ—Ü–∏–∫–ª',
          description: 'Harley-Davidson 1960 –≥–æ–¥–∞, –æ—Ç—Ä–µ—Å—Ç–∞–≤—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
          startTime: Date.now() - 21600000, // 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
          endTime: Date.now() - 7200000, // –∑–∞–∫–æ–Ω—á–∏–ª—Å—è 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
          minBid: 8000,
          creator: '0xaaaa...bbbb',
          isActive: false,
          winner: '0xcccc...dddd',
          winningBid: 12500,
        },
      ]
      
      setAuctions(mockAuctions)
      setLoading(false)
    }

    loadAuctions()
  }, [])

  const formatTimeRemaining = (endTime: number) => {
    const now = Date.now()
    const remaining = endTime - now
    
    if (remaining <= 0) {
      return '–ó–∞–≤–µ—Ä—à–µ–Ω'
    }
    
    const hours = Math.floor(remaining / (1000 * 60 * 60))
    const minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60))
    
    if (hours > 0) {
      return `${hours}—á ${minutes}–º`
    }
    return `${minutes}–º`
  }

  const formatAddress = (address: string) => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—É–∫—Ü–∏–æ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const filteredAuctions = auctions.filter(auction => {
    return filterType === 'active' ? auction.isActive : !auction.isActive
  })

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    )
  }

  if (filteredAuctions.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="text-6xl mb-4">üèõÔ∏è</div>
        <h3 className="text-xl font-semibold text-gray-900 mb-2">
          {filterType === 'active' 
            ? '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤' 
            : '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤'
          }
        </h3>
        <p className="text-gray-600">
          {filterType === 'active' 
            ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–∏!' 
            : '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤.'
          }
        </p>
      </div>
    )
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {filteredAuctions.map((auction) => (
        <div key={auction.id} className="card hover:shadow-lg transition-shadow duration-200">
          <div className="flex items-start justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900 flex-1">
              {auction.itemName}
            </h3>
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
              auction.isActive 
                ? 'bg-green-100 text-green-800' 
                : 'bg-gray-100 text-gray-800'
            }`}>
              {auction.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–≤–µ—Ä—à–µ–Ω'}
            </span>
          </div>

          <p className="text-gray-600 mb-4 text-sm">
            {auction.description}
          </p>

          <div className="space-y-2 mb-4">
            <div className="flex justify-between text-sm">
              <span className="text-gray-500">–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞:</span>
              <span className="font-medium">{auction.minBid} ETH</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-500">–°–æ–∑–¥–∞—Ç–µ–ª—å:</span>
              <span className="font-medium">{formatAddress(auction.creator)}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-500">
                {auction.isActive ? '–û—Å—Ç–∞–ª–æ—Å—å:' : '–°—Ç–∞—Ç—É—Å:'}
              </span>
              <span className={`font-medium ${
                auction.isActive ? 'text-primary-600' : 'text-gray-600'
              }`}>
                {formatTimeRemaining(auction.endTime)}
              </span>
            </div>
          </div>

          {auction.isActive ? (
            <button
              onClick={() => onBidClick(auction.id)}
              className="w-full btn-primary"
            >
              üîí –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É
            </button>
          ) : auction.winner ? (
            <div className="bg-gray-50 p-3 rounded-lg">
              <div className="text-sm text-gray-600 mb-1">–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</div>
              <div className="font-medium text-gray-900">
                {formatAddress(auction.winner)}
              </div>
              <div className="text-sm text-gray-600 mt-1">
                –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {auction.winningBid} ETH
              </div>
            </div>
          ) : (
            <div className="bg-gray-50 p-3 rounded-lg text-center">
              <span className="text-gray-600">–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</span>
            </div>
          )}
        </div>
      ))}
    </div>
  )
} 