'use client'

import { useState } from 'react'

interface CreateAuctionModalProps {
  isOpen: boolean
  onClose: () => void
}

export default function CreateAuctionModal({ isOpen, onClose }: CreateAuctionModalProps) {
  const [formData, setFormData] = useState({
    itemName: '',
    description: '',
    duration: 24,
    minBid: 0.1,
  })
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.itemName.trim()) {
        throw new Error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞')
      }
      if (!formData.description.trim()) {
        throw new Error('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
      }
      if (formData.minBid <= 0) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
      }
      if (formData.duration <= 0) {
        throw new Error('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
      }

      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      setSuccess(true)
      setTimeout(() => {
        setSuccess(false)
        onClose()
        setFormData({
          itemName: '',
          description: '',
          duration: 24,
          minBid: 0.1,
        })
      }, 2000)
      
    } catch (err: any) {
      setError(err.message)
    } finally {
      setIsLoading(false)
    }
  }

  const handleInputChange = (field: string, value: string | number) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">
              –°–æ–∑–¥–∞—Ç—å –ê—É–∫—Ü–∏–æ–Ω
            </h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 text-2xl"
            >
              √ó
            </button>
          </div>

          {success ? (
            <div className="text-center py-8">
              <div className="text-6xl mb-4">üéâ</div>
              <h3 className="text-xl font-semibold text-green-600 mb-2">
                –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!
              </h3>
              <p className="text-gray-600">
                –í–∞—à –∞—É–∫—Ü–∏–æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
              </p>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-4">
              {error && (
                <div className="p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                  {error}
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ *
                </label>
                <input
                  type="text"
                  value={formData.itemName}
                  onChange={(e) => handleInputChange('itemName', e.target.value)}
                  className="input-field"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∏–Ω—Ç–∞–∂–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞"
                  disabled={isLoading}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –û–ø–∏—Å–∞–Ω–∏–µ *
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  className="input-field min-h-[100px] resize-none"
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞..."
                  disabled={isLoading}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã) *
                </label>
                <input
                  type="number"
                  value={formData.duration}
                  onChange={(e) => handleInputChange('duration', parseInt(e.target.value) || 1)}
                  className="input-field"
                  min="1"
                  max="168"
                  disabled={isLoading}
                />
                <p className="text-xs text-gray-500 mt-1">
                  –û—Ç 1 —á–∞—Å–∞ –¥–æ 7 –¥–Ω–µ–π (168 —á–∞—Å–æ–≤)
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (ETH) *
                </label>
                <input
                  type="number"
                  value={formData.minBid}
                  onChange={(e) => handleInputChange('minBid', parseFloat(e.target.value) || 0)}
                  className="input-field"
                  min="0.001"
                  step="0.001"
                  disabled={isLoading}
                />
              </div>

              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">üîí –ì–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:</h4>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>‚Ä¢ –°—Ç–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã</li>
                  <li>‚Ä¢ –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–æ–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</li>
                  <li>‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
                  <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è zk-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏</li>
                </ul>
              </div>

              <div className="flex space-x-3 pt-4">
                <button
                  type="button"
                  onClick={onClose}
                  className="flex-1 btn-secondary"
                  disabled={isLoading}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  type="submit"
                  className="flex-1 btn-primary disabled:opacity-50"
                  disabled={isLoading}
                >
                  {isLoading ? '–°–æ–∑–¥–∞–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å –ê—É–∫—Ü–∏–æ–Ω'}
                </button>
              </div>
            </form>
          )}
        </div>
      </div>
    </div>
  )
} 