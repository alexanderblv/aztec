'use client'

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { AztecService } from './aztec'
import { aztecDemoService } from './aztec-demo'

interface AztecContextType {
  service: any
  isTestnet: boolean
  network: 'sandbox' | 'testnet'
  isConnected: boolean
  walletAddress: string | null
  switchNetwork: (network: 'sandbox' | 'testnet') => Promise<void>
  connectWallet: (privateKey?: string) => Promise<string>
  disconnect: () => void
}

const AztecContext = createContext<AztecContextType | null>(null)

export function useAztec() {
  const context = useContext(AztecContext)
  if (!context) {
    throw new Error('useAztec must be used within AztecProvider')
  }
  return context
}

interface AztecProviderProps {
  children: ReactNode
  initialNetwork?: 'sandbox' | 'testnet'
}

export function AztecProvider({ children, initialNetwork = 'sandbox' }: AztecProviderProps) {
  const [network, setNetwork] = useState<'sandbox' | 'testnet'>(initialNetwork)
  const [service, setService] = useState<any>(null)
  const [isConnected, setIsConnected] = useState(false)
  const [walletAddress, setWalletAddress] = useState<string | null>(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ—Ç–∏
  useEffect(() => {
    const initializeService = async () => {
      try {
        const newService = network === 'testnet' ? new AztecService() : aztecDemoService
        
        if (network === 'testnet') {
          const testnetUrl = typeof window !== 'undefined' && window.location.hostname === 'localhost'
            ? 'https://aztec-alpha-testnet-fullnode.zkv.xyz'
            : 'https://aztec-alpha-testnet-fullnode.zkv.xyz'
          await newService.initialize(testnetUrl)
          console.log('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Aztec Testnet')
          console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –µ—â–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç. –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º.')
        } else {
          await newService.initialize()
          console.log('üîß –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Aztec Sandbox (–¥–µ–º–æ)')
        }
        
        setService(newService)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Aztec —Å–µ—Ä–≤–∏—Å–∞:', error)
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å testnet, –ø–∞–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –¥–µ–º–æ
        if (network === 'testnet') {
          console.log('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ testnet')
          try {
            await aztecDemoService.initialize()
            setService(aztecDemoService)
            setNetwork('sandbox')
            if (typeof window !== 'undefined') {
              localStorage.setItem('aztecNetwork', 'sandbox')
            }
          } catch (demoError) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–∂–µ –¥–µ–º–æ —Å–µ—Ä–≤–∏—Å:', demoError)
          }
        }
      }
    }

    initializeService()
  }, [network])

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (typeof window === 'undefined') return
    
    const savedNetwork = localStorage.getItem('aztecNetwork') as 'sandbox' | 'testnet'
    const savedAddress = localStorage.getItem('walletAddress')
    
    if (savedNetwork && savedNetwork !== network) {
      setNetwork(savedNetwork)
    }
    
    if (savedAddress) {
      setWalletAddress(savedAddress)
      setIsConnected(true)
    }
  }, [network])

  const switchNetwork = async (newNetwork: 'sandbox' | 'testnet') => {
    if (newNetwork === network) return
    
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏: ${network} ‚Üí ${newNetwork}`)
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫
    if (isConnected) {
      disconnect()
    }
    
    setNetwork(newNetwork)
    if (typeof window !== 'undefined') {
      localStorage.setItem('aztecNetwork', newNetwork)
    }
  }

  const connectWallet = async (privateKey?: string): Promise<string> => {
    if (!service) {
      throw new Error('–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }

    try {
      let address: string
      
      if (privateKey) {
        address = await service.connectWallet(privateKey)
      } else {
        address = await service.createWallet()
      }
      
      setWalletAddress(address)
      setIsConnected(true)
      
      if (typeof window !== 'undefined') {
        localStorage.setItem('walletAddress', address)
        localStorage.setItem('walletMode', 'demo')
      }
      
      return address
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error)
      throw error
    }
  }

  const disconnect = () => {
    setIsConnected(false)
    setWalletAddress(null)
    
    if (typeof window !== 'undefined') {
      localStorage.removeItem('walletAddress')
      localStorage.removeItem('walletMode')
    }
  }

  const value: AztecContextType = {
    service,
    isTestnet: network === 'testnet',
    network,
    isConnected,
    walletAddress,
    switchNetwork,
    connectWallet,
    disconnect
  }

  return (
    <AztecContext.Provider value={value}>
      {children}
    </AztecContext.Provider>
  )
} 